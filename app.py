# --- 1. IMPORTA√á√ïES COMPLETAS ---
import streamlit as st
import os
from dotenv import load_dotenv
from sqlalchemy import text
from langchain_core.documents import Document
from langchain_core.prompts import ChatPromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain_community.document_loaders import PyPDFLoader, Docx2txtLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_community.tools.tavily_search import TavilySearchResults
from langchain_core.messages import HumanMessage, AIMessage

# Carrega as vari√°veis do arquivo .env
load_dotenv()

# --- 2. GERENCIAMENTO DO BANCO DE DADOS DE PERSONAS (SQLITE) ---
conn = st.connection('personas_db', type='sql', url='sqlite:///personas.db')

def criar_tabela_personas():
    with conn.session as s:
        s.execute(text('CREATE TABLE IF NOT EXISTS personas (nome TEXT PRIMARY KEY, prompt TEXT);'))
        s.commit()

@st.cache_data(ttl=3600)
def buscar_personas():
    df = conn.query('SELECT nome, prompt FROM personas', ttl=600)
    if df.empty:
        return {}
    return {row['nome']: row['prompt'] for index, row in df.iterrows()}

def atualizar_persona(nome, prompt):
    with conn.session as s:
        s.execute(text('UPDATE personas SET prompt = :prompt WHERE nome = :nome;'), params=dict(prompt=prompt, nome=nome))
        s.commit()
    st.cache_data.clear()

def criar_nova_persona(nome, prompt):
    with conn.session as s:
        s.execute(text('INSERT INTO personas (nome, prompt) VALUES (:nome, :prompt);'), params=dict(nome=nome, prompt=prompt))
        s.commit()
    st.cache_data.clear()

def deletar_persona(nome):
    with conn.session as s:
        s.execute(text('DELETE FROM personas WHERE nome = :nome;'), params=dict(nome=nome))
        s.commit()
    st.cache_data.clear()

# --- 3. CONFIGURA√á√ÉO DO BACKEND DE RAG ---
@st.cache_resource
def carregar_e_processar_dados():
    caminho_dados = "dados/"
    documentos_padrao = []
    for nome_arquivo in os.listdir(caminho_dados):
        if nome_arquivo == "GlossarioDiamondone.txt": continue
        caminho_completo = os.path.join(caminho_dados, nome_arquivo)
        try:
            if nome_arquivo.endswith(".pdf"): loader = PyPDFLoader(caminho_completo)
            elif nome_arquivo.endswith(".docx"): loader = Docx2txtLoader(caminho_completo)
            documentos_padrao.extend(loader.load())
        except Exception as e: print(f"Erro ao carregar {nome_arquivo}: {e}")
    text_splitter_padrao = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    chunks_padrao = text_splitter_padrao.split_documents(documentos_padrao)
    chunks_glossario = []
    caminho_glossario = os.path.join(caminho_dados, "GlossarioDiamondone.txt")
    try:
        with open(caminho_glossario, 'r', encoding='utf-8') as f:
            conteudo_glossario = f.read()
        entradas_glossario = conteudo_glossario.strip().split('\n\n')
        for entrada in entradas_glossario:
            chunks_glossario.append(Document(page_content=entrada, metadata={"source": "GlossarioDiamondone.txt"}))
    except Exception as e: print(f"Erro ao processar gloss√°rio: {e}")
    todos_os_chunks = chunks_padrao + chunks_glossario
    embeddings = HuggingFaceEmbeddings(model_name='paraphrase-multilingual-MiniLM-L12-v2')
    db = FAISS.from_documents(todos_os_chunks, embeddings)
    return db.as_retriever(search_type="mmr", search_kwargs={"k": 5})

# --- 4. DADOS PADR√ÉO E AVATARES ---
PERSONAS_PADRAO = {
    "Consultor Geral": """Voc√™ √© um consultor especialista no sistema DiamondOne para ind√∫strias de manufatura. Sua tarefa √© responder √† pergunta do usu√°rio de forma clara, profissional e objetiva. Baseie sua resposta estritamente no seguinte contexto extra√≠do da documenta√ß√£o:\n<context>{context}</context>\nPergunta: {input}""",
    "Estrategista de Marketing": """Voc√™ √© o "Marketer DiamondOne", um especialista em marketing de produto B2B para a ind√∫stria de manufatura. Sua miss√£o √© traduzir caracter√≠sticas t√©cnicas em benef√≠cios de neg√≥cio claros e atraentes, usando uma linguagem persuasiva e aut√™ntica. Para estabelecer credibilidade, incorpore termos do l√©xico da ind√∫stria de forma natural em sua comunica√ß√£o.\n<context>{context}</context>\nTarefa de Marketing: {input}""",
    "Analista de Implementa√ß√£o": """Voc√™ √© um Analista de Implementa√ß√£o S√™nior do DiamondOne. Sua tarefa √© fornecer respostas t√©cnicas, precisas e em formato de passo-a-passo ou lista, quando apropriado. Seja direto e foque nos detalhes t√©cnicos da implementa√ß√£o, evitando linguagem de marketing ou opini√µes. Baseie sua resposta estritamente no seguinte contexto extra√≠do da documenta√ß√£o:\n<context>{context}</context>\nPergunta T√©cnica: {input}""",
    "Analista de Conhecimento (H√≠brido)": """Voc√™ √© um "Analista de Conhecimento" s√™nior. Sua tarefa √© criar uma defini√ß√£o robusta e otimizada para um termo t√©cnico, baseando-se em m√∫ltiplas fontes.\n**Processo de 4 Passos:**\n1.  **An√°lise Prim√°ria:** Leia a defini√ß√£o inicial fornecida no "Texto para An√°lise".\n2.  **Contexto Interno:** Verifique o "Contexto do Gloss√°rio Atual" para ver se o termo j√° existe ou se h√° termos relacionados.\n3.  **Pesquisa Externa:** Use os "Resultados da Busca na Web" para obter defini√ß√µes alternativas, contexto adicional e exemplos de uso.\n4.  **S√≠ntese Final:** Com base em TODAS as fontes, escreva uma √∫nica e clara "Defini√ß√£o Otimizada". Esta defini√ß√£o deve ser completa, f√°cil de entender e estruturada para ser facilmente utilizada por um sistema de IA no futuro. Se as fontes conflitarem, use seu julgamento para criar a melhor defini√ß√£o poss√≠vel.\n**Contexto do Gloss√°rio Atual:**\n<context>{context}</context>\n**Resultados da Busca na Web:**\n<web_search_results>{web_search_results}</web_search_results>\n**Texto para An√°lise:** {input}\n**Defini√ß√£o Otimizada:**"""
}
AVATARES = {
    "human": "üë§", "ai": "ü§ñ", "Consultor Geral": "üí¨", "Estrategista de Marketing": "üìà",
    "Analista de Implementa√ß√£o": "üõ†Ô∏è", "Analista de Conhecimento (H√≠brido)": "üî¨"
}

# --- 5. APLICA√á√ÉO PRINCIPAL ---
criar_tabela_personas()
st.title("ü§ñ Especialista Virtual DiamondOne V2.9")

st.sidebar.title("Navega√ß√£o")
pagina = st.sidebar.radio("Selecione uma p√°gina:", ["Chat com Especialista", "Gerenciador de Personas"])

personas_db = buscar_personas()

if pagina == "Chat com Especialista":
    st.sidebar.title("Configura√ß√µes do Chat")
    
    if not personas_db:
        st.warning("Nenhuma persona encontrada. V√° para o 'Gerenciador de Personas' para criar sua primeira persona.")
        st.stop()
        
    modo_selecionado_nome = st.sidebar.selectbox("Selecione a Persona:", options=list(personas_db.keys()))
    st.header(f"Conversando com o {modo_selecionado_nome}")

    if "chat_history" not in st.session_state:
        st.session_state.chat_history = {}
    
    if modo_selecionado_nome not in st.session_state.chat_history:
        st.session_state.chat_history[modo_selecionado_nome] = []

    for message in st.session_state.chat_history[modo_selecionado_nome]:
        avatar = AVATARES.get(message.type, AVATARES.get(modo_selecionado_nome))
        with st.chat_message(message.type, avatar=avatar):
            st.markdown(f'**{modo_selecionado_nome if message.type == "ai" else "User"}**')
            st.markdown(message.content)

    if prompt_usuario := st.chat_input("Fa√ßa sua pergunta..."):
        st.session_state.chat_history[modo_selecionado_nome].append(HumanMessage(content=prompt_usuario))
        with st.chat_message("human", avatar=AVATARES["human"]):
            st.markdown(f'**User**'); st.markdown(prompt_usuario)

        with st.chat_message("ai", avatar=AVATARES.get(modo_selecionado_nome)):
            st.markdown(f'**{modo_selecionado_nome}**')
            placeholder = st.empty()
            try:
                if os.getenv("GOOGLE_API_KEY") is None: 
                    st.error("Chave de API do Google n√£o carregada!"); st.stop()
                
                retriever = carregar_e_processar_dados()
                llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash-001", temperature=0.5, streaming=True)
                
                prompt_texto_selecionado = personas_db[modo_selecionado_nome]
                
                contextualize_q_prompt = ChatPromptTemplate.from_messages([
                    ("system", "Dada a conversa abaixo e a √∫ltima pergunta do usu√°rio, formule uma pergunta aut√¥noma que possa ser entendida sem o hist√≥rico da conversa. N√£o responda √† pergunta, apenas a reformule se necess√°rio, caso contr√°rio, retorne-a como est√°."),
                    ("placeholder", "{chat_history}"),
                    ("human", "{input}"),
                ])
                history_aware_retriever = create_history_aware_retriever(llm, retriever, contextualize_q_prompt)
                
                qa_prompt = ChatPromptTemplate.from_messages([
                    ("system", prompt_texto_selecionado),
                    ("placeholder", "{chat_history}"),
                    ("human", "{input}"),
                ])
                question_answer_chain = create_stuff_documents_chain(llm, qa_prompt)
                rag_chain = create_retrieval_chain(history_aware_retriever, question_answer_chain)

                chat_history_langchain = st.session_state.chat_history[modo_selecionado_nome][:-1]
                
                # CORRE√á√ÉO FINAL AQUI
                def stream_resposta_gerador(stream_chunks):
                    for chunk in stream_chunks:
                        # Procura pela chave 'answer' e s√≥ retorna o conte√∫do se ela existir
                        if answer_chunk := chunk.get("answer"):
                            yield answer_chunk

                stream_chunks = rag_chain.stream({"input": prompt_usuario, "chat_history": chat_history_langchain})
                resposta_completa = placeholder.write_stream(stream_resposta_gerador(stream_chunks))
                
                st.session_state.chat_history[modo_selecionado_nome].append(AIMessage(content=resposta_completa))
            except Exception as e:
                st.error(f"Ocorreu um erro: {e}"); placeholder.empty()

elif pagina == "Gerenciador de Personas":
    st.header("Gerenciador de Personas")
    st.info("Crie, edite e delete as personalidades do seu especialista de IA.")
    
    with st.expander("‚ûï Criar Nova Persona"):
        with st.form("nova_persona_form"):
            novo_nome = st.text_input("Nome da Nova Persona (ex: Suporte T√©cnico)")
            novo_prompt = st.text_area("Prompt da Nova Persona:", height=200)
            submitted = st.form_submit_button("Criar Persona")
            if submitted:
                if novo_nome and novo_prompt:
                    criar_nova_persona(novo_nome, novo_prompt)
                    st.success(f"Persona '{novo_nome}' criada com sucesso!")
                    st.rerun()
                else:
                    st.error("Por favor, preencha o nome e o prompt.")

    st.divider()
    
    personas_editor_df = conn.query('SELECT nome, prompt FROM personas', ttl=10)
    
    if personas_editor_df.empty:
        st.warning("O banco de dados de personas est√° vazio.")
        if st.button("Criar Personas Padr√£o"):
            with conn.session as s:
                for nome, prompt_texto in PERSONAS_PADRAO.items():
                    s.execute(text('INSERT OR REPLACE INTO personas (nome, prompt) VALUES (:nome, :prompt);'), params=dict(nome=nome, prompt=prompt_texto))
                s.commit()
            st.success("Personas padr√£o criadas com sucesso!")
            st.rerun()
    else:
        st.subheader("Editar Personas Existentes")
        lista_nomes_personas = personas_editor_df['nome'].tolist()
        persona_para_editar = st.selectbox("Selecione uma persona para editar:", options=lista_nomes_personas)
        
        prompt_atual = personas_editor_df[personas_editor_df['nome'] == persona_para_editar]['prompt'].iloc[0]
        
        prompt_editado = st.text_area("Edite o prompt:", value=prompt_atual, height=300, key=f"editor_{persona_para_editar}")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Salvar Altera√ß√µes"):
                atualizar_persona(persona_para_editar, prompt_editado)
                st.success(f"Persona '{persona_para_editar}' atualizada!")
        with col2:
            if st.button("‚ùå Deletar Persona", type="primary"):
                deletar_persona(persona_para_editar)
                st.success(f"Persona '{persona_para_editar}' deletada!")
                st.rerun()